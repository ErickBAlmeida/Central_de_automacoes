import os
import customtkinter as ctk
from PIL import Image
from automacoes.baixarAnexos.RoboAnexo import RoboAnexo
import automacoes.roboRC.RoboRC as roboRC
import automacoes.upload.api as uploadAPI
from automacoes.teste.temp import Temporario
import automacoes.verificador.script as verificador


class AutomacaoApp:
    def __init__(self):
        """Initialize the automation application with UI setup and theme configuration."""
        # Configura√ß√£o do tema
        self.tema_atual = "dark"  # Vari√°vel para controlar o tema
        ctk.set_appearance_mode(self.tema_atual)
        ctk.set_default_color_theme("blue")

        # Criar janela principal
        self.janela = ctk.CTk()
        self.janela.title("Central de Automa√ß√£o - Barros ADV")
        self.janela.geometry("900x600")

        # Inicializa componentes de interface
        self.setup_ui()

    def setup_ui(self):
        # Define os componentes de interface
        self.create_side_frame()
        self.create_main_frame()
        self.criar_botoes()
        self.create_log_area()
        self.mostrar_home()

    def create_side_frame(self):
        """Create the side frame with theme toggle and automation buttons."""
        self.frame_lateral = ctk.CTkFrame(self.janela, width=250)
        self.frame_lateral.pack(side="left", fill="y", padx=10, pady=10)

        # T√≠tulo lateral
        self.label_titulo = ctk.CTkLabel(
            self.frame_lateral, 
            text="Painel de Automa√ß√µes", 
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.label_titulo.pack(pady=20)

        # Bot√£o para alternar tema
        self.btn_tema = ctk.CTkButton(
            self.frame_lateral,
            text="üåô Tema Escuro" if self.tema_atual == "dark" else "‚òÄÔ∏è Tema Claro",
            command=self.alternar_tema,
            width=220,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#444",
            hover_color="#333"
        )
        self.btn_tema.pack(pady=8)

    def create_main_frame(self):
        """Create the main frame with scrollable content and image display."""
        self.frame_principal = ctk.CTkScrollableFrame(self.janela)
        self.frame_principal.pack(side="right", fill="both", expand=True, padx=10, pady=10)

        self.frame_imagem = ctk.CTkFrame(
            self.frame_principal,
            fg_color="transparent",
            height=150
        )
        self.frame_imagem.pack(pady=(20, 10))

        self.carregar_logo()

    def carregar_logo(self):
        try:
            diretorio_atual = os.path.dirname(os.path.abspath(__file__))
            caminho_light = os.path.join(diretorio_atual, "assets/logos/logo-azul.png")
            caminho_dark = os.path.join(diretorio_atual, "assets/logos/logo-branca.png")

            # Carrega e redimensiona a imagem
            imagem = ctk.CTkImage(
                light_image=Image.open(caminho_light),
                dark_image=Image.open(caminho_dark),
                size=(180, 100)
            )

            # Cria label com a imagem
            self.label_imagem = ctk.CTkLabel(
                self.frame_imagem,
                text="",
                image=imagem
            )
            self.label_imagem.pack()

        except Exception as e:
            print(f"Erro detalhado ao carregar imagem: {str(e)}")
            self.label_imagem = ctk.CTkLabel(
                self.frame_imagem,
                text=f"Erro ao carregar imagem:\n{str(e)}",
                font=ctk.CTkFont(size=12),
                wraplength=200
            )
            self.label_imagem.pack()

    def criar_botoes(self):
        # Bot√£o Home
        btn_home = ctk.CTkButton(
            self.frame_lateral,
            text="Home",
            command=self.mostrar_home,
            width=220,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#2d5a27",
            hover_color="#1f3d1b"
        )
        btn_home.pack(pady=8)

        # Separador
        separador = ctk.CTkFrame(self.frame_lateral, height=2, fg_color="gray50")
        separador.pack(fill="x", padx=10, pady=10)

        # Frame para os bot√µes de automa√ß√£o
        frame_botoes = ctk.CTkFrame(self.frame_lateral, fg_color="transparent")
        frame_botoes.pack(fill="x", expand=False, padx=5)

        # Bot√µes de automa√ß√£o
        automacoes = [
            "Baixar Anexos",
            "Upload",
            "Cadastro DRC",
            "Verificador",
        ]

        for automacao in automacoes:
            btn = ctk.CTkButton(
                frame_botoes,
                text=automacao,
                command=lambda x=automacao: self.mostrar_automacao(x),
                width=220,
                height=40,
                font=ctk.CTkFont(size=14)
            )
            btn.pack(pady=8)

    def create_log_area(self):
        """Create the log area for displaying automation details and progress."""
        # Frame para a √°rea de conte√∫do
        self.frame_conteudo = ctk.CTkFrame(self.frame_principal)
        self.frame_conteudo.pack(fill="both", expand=True, padx=10, pady=10)

        # Frame para t√≠tulo da automa√ß√£o
        self.frame_titulo = ctk.CTkFrame(self.frame_conteudo, fg_color="transparent")
        self.frame_titulo.pack(fill="x", padx=20, pady=(10, 5))

        # Label para t√≠tulo (inicialmente vazio)
        self.label_titulo_automacao = ctk.CTkLabel(
            self.frame_titulo,
            text="",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.label_titulo_automacao.pack(pady=(10, 5))

        # Frame para descri√ß√£o
        self.frame_descricao = ctk.CTkFrame(self.frame_conteudo, fg_color="transparent")
        self.frame_descricao.pack(fill="x", padx=20, pady=5)

        # Labels para descri√ß√£o
        self.label_subtitulo_desc = ctk.CTkLabel(
            self.frame_descricao,
            text="",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.label_subtitulo_desc.pack(anchor="w")

        self.label_descricao = ctk.CTkLabel(
            self.frame_descricao,
            text="",
            font=ctk.CTkFont(size=14),
            justify="left",
            wraplength=600
        )
        self.label_descricao.pack(anchor="w", pady=5)

        # Frame para par√¢metros
        self.frame_parametros = ctk.CTkFrame(self.frame_conteudo, fg_color="transparent")
        self.frame_parametros.pack(fill="x", padx=20, pady=5)

        # Labels para par√¢metros
        self.label_subtitulo_param = ctk.CTkLabel(
            self.frame_parametros,
            text="",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.label_subtitulo_param.pack(anchor="w")

        self.label_parametros = ctk.CTkLabel(
            self.frame_parametros,
            text="",
            font=ctk.CTkFont(size=14),
            justify="left",
            wraplength=600
        )
        self.label_parametros.pack(anchor="w", pady=5)

        # Frame para controles (bot√£o e barra de progresso)
        self.frame_controles = ctk.CTkFrame(self.frame_conteudo, fg_color="transparent")
        self.frame_controles.pack(fill="x", padx=20, pady=20)

        self.entrada_label = ctk.CTkLabel(
            self.frame_controles,
            text="Entre com o caminho do diret√≥rio dos anexos:",
            font=ctk.CTkFont(size=14, weight="bold"),
            justify="center",
            wraplength=600
        )

        self.entrada = ctk.CTkEntry(self.frame_controles, width=300)
        self.entrada.pack_forget()

        # Bot√£o de execu√ß√£o (inicialmente escondido)
        self.btn_executar = ctk.CTkButton(
            self.frame_controles,
            text="Executar Automa√ß√£o",
            command=lambda: None,  # Ser√° atualizado quando selecionar uma automa√ß√£o
            width=200,
            height=40,
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=8
        )

        # Barra de progresso (inicialmente escondida)
        self.barra_progresso = ctk.CTkProgressBar(
            self.frame_controles,
            width=300,
            height=15,
            corner_radius=5,
            progress_color="#4da6ff"
        )

        # Esconde os controles inicialmente
        self.btn_executar.pack_forget()
        self.barra_progresso.pack_forget()

    def alternar_tema(self):
        """Toggle between light and dark themes."""
        self.tema_atual = "light" if self.tema_atual == "dark" else "dark"
        ctk.set_appearance_mode(self.tema_atual)

        # Atualiza o texto do bot√£o
        novo_texto = "üåôTema Escuro" if self.tema_atual == "dark" else "‚òÄÔ∏èTema Claro"
        self.btn_tema.configure(text=novo_texto)

    def iniciar(self):
        """Start the main application loop."""
        self.janela.mainloop()

    def obter_entrada(self):
        caminho = self.entrada.get()
        return caminho

    def mostrar_automacao(self, nome_automacao):
        # Atualiza o t√≠tulo
        self.label_titulo_automacao.configure(text=nome_automacao)
        
        # Atualiza a descri√ß√£o
        self.label_subtitulo_desc.configure(text="Descri√ß√£o")
        self.label_descricao.configure(text=self.obter_descricao(nome_automacao))
        
        # Atualiza os par√¢metros
        self.label_subtitulo_param.configure(text="Par√¢metros")
        self.label_parametros.configure(text=self.obter_parametros(nome_automacao))
        
        # Configura e mostra o bot√£o de execu√ß√£o
        self.btn_executar.configure(
            command=lambda: self.executar_automacao(nome_automacao)
        )

        if nome_automacao != 'Upload':
            self.entrada.grid_forget()
            self.entrada_label.grid_forget()
        else:
            self.entrada_label.grid(row=1,column=1,pady=0)
            self.entrada.grid(row=2,column=1,pady= 10)
            self.entrada.delete(0, ctk.END)
        
        self.btn_executar.grid(row=3,column=1,pady=5)
        
        # Mostra e reseta a barra de progresso
        self.barra_progresso.grid(row=4,column=1,pady=5)
        self.barra_progresso.set(0)

    def obter_descricao(self, nome_automacao):
        descricoes = {
            "Baixar Anexos": """Esta automa√ß√£o √© respons√°vel por realizar o download de novos anexos.
            
‚Ä¢ Baixa os novos anexos via GCPJ
‚Ä¢ Organiza os anexos em subpastas dentro do diret√≥rio 'Anexos' na sua √°rea de trabalho""",
            
            "Cadastro DRC": """Automatiza o processo de envio de relat√≥rios di√°rios.
            
‚Ä¢ Coleta dados do sistema principal
‚Ä¢ Formata as informa√ß√µes em planilhas
‚Ä¢ Envia e-mails autom√°ticos para a lista de destinat√°rios""",
            
            "Upload" : """Essa Automa√ß√£o √© respons√°vel Upload de novos anexos.

‚Ä¢ Renomear os anexos para o formato aceito no sistema
‚Ä¢ Subir os novo anexos no sistema Octopus""",

            "Verificador" : """Essa automa√ß√£o √© respons√°vel por verificar anexos n√£o cadastrados no sistema."""
        }
        return descricoes.get(nome_automacao, "Descri√ß√£o n√£o dispon√≠vel")

    def obter_parametros(self, nome_automacao):
        parametros = {
            "Baixar Anexos": """‚Ä¢ Entrada: Planilha excel com os processos GCPJ que dever√£o ser processados
‚Ä¢ Formato de sa√≠da: Documentos organizados em subdiret√≥rios na pasta 'Anexos' """,
            
            "Cadastro DRC": """‚Ä¢ Lista de destinat√°rios
‚Ä¢ Hor√°rio de execu√ß√£o
‚Ä¢ Tipo de relat√≥rio""",

            "Upload" : """‚Ä¢ Entrada: o Caminho do diret√≥rio onde h√° anexos que deseja subir.
‚Ä¢Sa√≠da: Novos sub diret√≥rios organizados em 'FEITOS', 'VAZIOS' caso a subpasta estiver vazia e 'N√ÉO ENCONTRADOS' caso o processo n√£o esteja no sistema""",

            "Verificador" : """‚Ä¢ Entrada: Planilha excel com os processos GCPJ que dever√£o ser verificados
‚Ä¢ Formato de sa√≠da: Nova planilha excel na sua √Årea de Trabalho com os casos que n√£o possuem pasta no sistema. """

        }
        return parametros.get(nome_automacao, "Sem par√¢metros dispon√≠veis")

    def executar_automacao(self, nome_automacao):
        # Inicia o progresso
        self.barra_progresso.set(0)

        # Criar uma inst√¢ncia de outra classe
        instancia_robo_anexo = RoboAnexo()
        instancia_temporario = Temporario()

        # Dicion√°rio de automa√ß√µes com fun√ß√µes associadas
        automacoes = {
            "Baixar Anexos": lambda: instancia_robo_anexo.main(),
            "Upload" : lambda: uploadAPI.main(self.obter_entrada()),
            "Cadastro DRC": lambda: instancia_temporario.main(),
            "Verificador" : verificador.main,
        }
        
        # Obter a fun√ß√£o de automa√ß√£o com base no nome
        func_automacao = automacoes.get(nome_automacao)

        if func_automacao != None:
            try:
                func_automacao()  # Chama a fun√ß√£o associada
                print(f"Processo '{nome_automacao}' finalizado.")
            except Exception as e:
                print(f"Erro ao executar automa√ß√£o '{nome_automacao}': {str(e)}")
        else:
            print("Automa√ß√£o n√£o encontrada")

        # Simula conclus√£o
        self.barra_progresso.set(1)
        return "Automa√ß√£o conclu√≠da."

    def mostrar_home(self):
        # Esconde os controles de automa√ß√£o
        self.btn_executar.grid_forget()
        self.barra_progresso.grid_forget()
        self.entrada.grid_forget()
        self.entrada_label.grid_forget()
        
        # Atualiza o t√≠tulo com emoji e cor personalizada
        self.label_titulo_automacao.configure(
            text="‚≠ê Central de Automa√ß√µes BARROS",
            font=ctk.CTkFont(size=28, weight="bold"),
            wraplength=600
        )  
        
        # Atualiza a descri√ß√£o
        self.label_subtitulo_desc.configure(
            text="‚ú® Principais Recursos",
            font=ctk.CTkFont(size=18, weight="bold"),
            wraplength=600
        )
        
        self.label_descricao.configure(
            text="""Automa√ß√µes de tarefas di√°rias dos escrit√≥rio da Barros & Advogados:

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° Automa√ß√µes Dispon√≠veis:


‚Ä¢ ‚¨áÔ∏è Baixar Anexo GCPJ
   Fa√ßa download de forma autom√°tica de documentos do sistema GCPJ

‚Ä¢ üìà Cadastro DRC
   Gera√ß√£o autom√°tica de relat√≥rios


üí° Dica: Selecione uma automa√ß√£o no menu lateral para come√ßar!""",
            font=ctk.CTkFont(size=13),  # Reduzido tamanho da fonte
            wraplength=550,
            justify="left"
        )
        
        # Atualiza os par√¢metros com estat√≠sticas
        self.label_subtitulo_param.configure(
            text="üìä Painel de Controle",
            font=ctk.CTkFont(size=18, weight="bold"),
            wraplength=600
        )
               
        
        self.label_parametros.configure(
            text=f"""‚öôÔ∏è Informa√ß√µes do Sistema:
            
‚Ä¢ üìå Vers√£o: 1.0.0 Beta

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ""",
            font=ctk.CTkFont(size=13),  # Reduzido tamanho da fonte
            wraplength=550,
            justify="left"
        )

if __name__ == "__main__":
    app = AutomacaoApp()
    app.iniciar()